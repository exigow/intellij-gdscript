{
    parserClass="tscn.parser.TscnParser"
    extends="tscn.psi.TscnBaseElement"

    psiClassPrefix="Tscn"
    psiImplClassSuffix="Impl"
    psiPackage="tscn.psi"
    psiImplPackage="tscn.psi.impl"
    psiImplUtilClass="tscn.psi.impl.TscnPsiImplUtil"

    elementTypeHolderClass="tscn.psi.TscnElementTypes"
    elementTypeClass="tscn.psi.TscnElementType"

    tokenTypeClass="tscn.psi.TscnTokenType"

    tokens = [
//        SPACE="regexp:\s+" // uncomment for live edit
        L_PAREN="("
        R_PAREN=")"
        L_BRACKET="["
        R_BRACKET="]"
        L_CURLY="{"
        R_CURLY="}"
        EQUAL="="
        SLASH="/"
        COMMA=","
        COLON=":"
        EXT_RESOURCE="ExtResource"
        SUB_RESOURCE="SubResource"
        NODE_KEYWORD="node"
        EXT_RESOURCE_KEYWORD="ext_resource"
        SUB_RESOURCE_KEYWORD="sub_resource"
        GD_SCENE_KEYWORD="gd_scene"
        GD_RESOURCE_KEYWORD="gd_resource"
        RESOURCE_KEYWORD="resource"
        TRUE="true"
        FALSE="false"
        NULL="null"

        IDENTIFIER="regexp:[A-Za-z_][A-Za-z0-9_]*"
        NUMBER="regexp:-?[0-9]+(\.[0-9]+)?"
        SINGLE_QUOTED_RESOURCE_STRING="regexp:\"res://([^\"\\]|\\.)*\""
        DOUBLE_QUOTED_RESOURCE_STRING="regexp:'res://([^'\\]|\\.)*'"
        SINGLE_QUOTED_STRING="regexp:'([^'\\]|\\.)*'"
        DOUBLE_QUOTED_STRING="regexp:\"([^\"\\]|\\.)*\""
        COMMENT="regexp:;[^\n]*"
    ]
}

root ::= top_level_rule*

// top-level rules
private top_level_rule ::= entry | ext_entry | sub_entry | property
entry ::= L_BRACKET (NODE_KEYWORD | GD_SCENE_KEYWORD | GD_RESOURCE_KEYWORD | RESOURCE_KEYWORD | IDENTIFIER) attribute* R_BRACKET property*
ext_entry ::= L_BRACKET EXT_RESOURCE_KEYWORD attribute* R_BRACKET property*
sub_entry ::= L_BRACKET SUB_RESOURCE_KEYWORD attribute* R_BRACKET property*
attribute ::= key EQUAL value
property ::= key EQUAL value
key ::= IDENTIFIER (SLASH (IDENTIFIER | NUMBER))*
value ::= expression

// expressions
private expression ::= list_expression
    | dictionary_expression
    | function_expression
    | sub_expression
    | ext_expression
    | primitive
list_expression ::= L_BRACKET expression? (COMMA expression)* R_BRACKET
dictionary_expression ::= L_CURLY pair_expression? (COMMA pair_expression)* R_CURLY
pair_expression ::= expression COLON expression
function_expression ::= IDENTIFIER L_PAREN expression? (COMMA expression)* R_PAREN
sub_expression ::= SUB_RESOURCE L_PAREN NUMBER R_PAREN {methods=[getReference]}
ext_expression ::= EXT_RESOURCE L_PAREN NUMBER R_PAREN {methods=[getReference]}

// primitives
private primitive ::= resource_string
    | string
    | NULL
    | TRUE
    | FALSE
    | NUMBER
private string ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING
resource_string ::= SINGLE_QUOTED_RESOURCE_STRING | DOUBLE_QUOTED_RESOURCE_STRING {methods=[getReference]}