/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package tscn.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static tscn.psi.TscnElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_TscnLexer.flex</tt>
 */
public class _TscnLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\3\1\22\0\1\3\1\0\1\10\4\0\1\17\1\21\1\22\2\0\1\30\1\6\1\7\1"+
    "\15\12\5\1\14\1\20\1\0\1\27\3\0\4\4\1\31\14\4\1\34\1\40\7\4\1\23\1\16\1\24"+
    "\1\0\1\44\1\0\1\47\1\41\1\37\1\43\1\12\1\46\1\45\4\4\1\50\1\4\1\42\1\35\2"+
    "\4\1\11\1\13\1\33\1\36\2\4\1\32\2\4\1\25\1\0\1\26\7\0\1\1\32\0\1\3\337\0\1"+
    "\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\3\3\1\5"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\6\3\2\0\1\20\2\0\3\3"+
    "\3\0\1\21\7\3\1\4\1\0\3\3\1\0\7\3"+
    "\1\0\3\3\1\0\1\3\1\22\1\3\1\23\1\24"+
    "\3\3\1\0\3\3\1\0\4\3\1\25\1\0\3\3"+
    "\1\0\4\3\1\0\3\3\1\0\4\3\1\26\1\0"+
    "\1\27\2\3\1\0\1\30\3\3\1\31\14\3\1\32"+
    "\1\33\1\34\1\35\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\51\0\51\0\u019a\0\u01c3\0\51\0\51"+
    "\0\51\0\51\0\51\0\51\0\51\0\51\0\u01ec\0\u0215"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\51\0\u0334"+
    "\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\51"+
    "\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572\0\u02e2"+
    "\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba"+
    "\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802"+
    "\0\u082b\0\u0854\0\173\0\u087d\0\173\0\173\0\u08a6\0\u08cf"+
    "\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17"+
    "\0\u0a40\0\u0a69\0\173\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36"+
    "\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e"+
    "\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\51\0\u0d74\0\173"+
    "\0\u0d9d\0\u0dc6\0\u0def\0\51\0\u0e18\0\u0e41\0\u0e6a\0\173"+
    "\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2"+
    "\0\u0fdb\0\u1004\0\u102d\0\u1056\0\173\0\173\0\173\0\173"+
    "\0\173";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\4\1\30\4\4\1\31\1\4\1\32\2\4\1\33"+
    "\1\34\2\4\52\0\3\3\51\0\2\4\3\0\3\4"+
    "\15\0\20\4\5\0\1\5\1\0\1\35\46\0\1\5"+
    "\43\0\10\36\1\37\1\40\4\36\1\41\32\36\4\0"+
    "\2\4\3\0\1\4\1\42\1\4\15\0\20\4\4\0"+
    "\2\4\3\0\3\4\15\0\1\4\1\43\16\4\4\0"+
    "\2\4\3\0\3\4\15\0\5\4\1\44\12\4\11\45"+
    "\1\46\4\45\1\47\1\50\31\45\2\16\1\0\46\16"+
    "\4\0\2\4\3\0\3\4\15\0\1\4\1\51\16\4"+
    "\4\0\2\4\3\0\1\52\2\4\15\0\20\4\4\0"+
    "\2\4\3\0\3\4\15\0\5\4\1\53\12\4\4\0"+
    "\2\4\3\0\3\4\15\0\4\4\1\54\1\55\12\4"+
    "\4\0\2\4\3\0\3\4\15\0\12\4\1\56\5\4"+
    "\4\0\2\4\3\0\3\4\15\0\16\4\1\57\1\4"+
    "\5\0\1\60\43\0\10\36\1\37\5\36\1\41\42\36"+
    "\1\37\1\36\1\61\3\36\1\41\33\36\2\0\46\36"+
    "\4\0\2\4\3\0\2\4\1\62\15\0\20\4\4\0"+
    "\2\4\3\0\3\4\15\0\2\4\1\63\15\4\4\0"+
    "\2\4\3\0\3\4\15\0\10\4\1\64\7\4\16\45"+
    "\1\47\1\50\43\45\1\65\3\45\1\47\1\50\32\45"+
    "\2\0\46\45\4\0\2\4\3\0\3\4\15\0\2\4"+
    "\1\66\15\4\4\0\2\4\3\0\3\4\15\0\5\4"+
    "\1\67\12\4\4\0\2\4\3\0\3\4\15\0\10\4"+
    "\1\70\7\4\4\0\2\4\3\0\3\4\15\0\12\4"+
    "\1\71\5\4\4\0\2\4\3\0\3\4\15\0\17\4"+
    "\1\72\4\0\2\4\3\0\3\4\15\0\13\4\1\73"+
    "\4\4\4\0\2\4\3\0\3\4\15\0\17\4\1\74"+
    "\10\36\1\37\2\36\1\75\2\36\1\41\32\36\4\0"+
    "\2\4\3\0\3\4\15\0\4\4\1\76\13\4\4\0"+
    "\2\4\3\0\3\4\15\0\13\4\1\77\4\4\4\0"+
    "\2\4\3\0\3\4\15\0\13\4\1\100\4\4\13\45"+
    "\1\101\2\45\1\47\1\50\31\45\4\0\2\4\3\0"+
    "\3\4\15\0\3\4\1\102\14\4\4\0\2\4\3\0"+
    "\1\4\1\103\1\4\15\0\20\4\4\0\2\4\3\0"+
    "\3\4\15\0\3\4\1\104\14\4\4\0\2\4\3\0"+
    "\1\4\1\105\1\4\15\0\20\4\4\0\2\4\3\0"+
    "\3\4\15\0\17\4\1\106\4\0\2\4\3\0\1\107"+
    "\1\4\1\110\15\0\20\4\4\0\2\4\3\0\2\4"+
    "\1\111\15\0\20\4\10\36\1\37\3\36\1\112\1\36"+
    "\1\41\32\36\4\0\2\4\3\0\3\4\15\0\5\4"+
    "\1\113\12\4\4\0\2\4\3\0\1\114\2\4\15\0"+
    "\20\4\4\0\2\4\3\0\1\115\2\4\15\0\20\4"+
    "\14\45\1\116\1\45\1\47\1\50\31\45\4\0\2\4"+
    "\3\0\1\4\1\117\1\4\15\0\20\4\4\0\2\4"+
    "\3\0\1\4\1\120\1\4\15\0\20\4\4\0\2\4"+
    "\3\0\1\4\1\121\1\4\15\0\20\4\4\0\2\4"+
    "\3\0\3\4\15\0\6\4\1\122\11\4\4\0\2\4"+
    "\3\0\1\4\1\123\1\4\15\0\20\4\10\36\1\37"+
    "\4\36\1\124\1\41\32\36\4\0\2\4\3\0\1\125"+
    "\2\4\15\0\20\4\4\0\2\4\3\0\1\4\1\126"+
    "\1\4\15\0\20\4\4\0\2\4\3\0\1\4\1\127"+
    "\1\4\15\0\20\4\15\45\1\130\1\47\1\50\31\45"+
    "\4\0\2\4\3\0\2\4\1\131\15\0\20\4\4\0"+
    "\2\4\3\0\2\4\1\132\15\0\20\4\4\0\2\4"+
    "\3\0\2\4\1\133\15\0\20\4\4\0\2\4\3\0"+
    "\1\4\1\134\1\4\15\0\20\4\10\36\1\37\4\36"+
    "\1\135\1\41\32\36\4\0\2\4\3\0\3\4\15\0"+
    "\6\4\1\136\11\4\4\0\2\4\3\0\2\4\1\137"+
    "\15\0\20\4\4\0\2\4\3\0\2\4\1\140\15\0"+
    "\20\4\15\45\1\141\1\47\1\50\31\45\4\0\2\4"+
    "\3\0\3\4\15\0\4\4\1\142\13\4\4\0\2\4"+
    "\3\0\3\4\15\0\4\4\1\143\13\4\4\0\2\4"+
    "\3\0\3\4\15\0\4\4\1\144\13\4\4\0\2\4"+
    "\3\0\3\4\15\0\11\4\1\145\6\4\10\135\1\146"+
    "\5\135\1\147\32\135\4\0\2\4\3\0\1\4\1\150"+
    "\1\4\15\0\20\4\4\0\2\4\3\0\3\4\15\0"+
    "\4\4\1\151\13\4\4\0\2\4\3\0\3\4\15\0"+
    "\4\4\1\152\13\4\16\141\1\153\1\154\31\141\4\0"+
    "\2\4\3\0\3\4\15\0\5\4\1\155\12\4\4\0"+
    "\2\4\3\0\3\4\15\0\5\4\1\156\12\4\4\0"+
    "\2\4\3\0\3\4\15\0\5\4\1\157\12\4\4\0"+
    "\2\4\3\0\1\4\1\160\1\4\15\0\20\4\1\135"+
    "\2\0\46\135\4\0\2\4\3\0\3\4\15\0\5\4"+
    "\1\161\12\4\4\0\2\4\3\0\3\4\15\0\5\4"+
    "\1\162\12\4\1\141\2\0\46\141\4\0\2\4\3\0"+
    "\1\163\2\4\15\0\20\4\4\0\2\4\3\0\1\164"+
    "\2\4\15\0\20\4\4\0\2\4\3\0\1\165\2\4"+
    "\15\0\20\4\4\0\2\4\3\0\1\166\2\4\15\0"+
    "\20\4\4\0\2\4\3\0\1\167\2\4\15\0\20\4"+
    "\4\0\2\4\3\0\3\4\15\0\6\4\1\170\11\4"+
    "\4\0\2\4\3\0\3\4\15\0\6\4\1\171\11\4"+
    "\4\0\2\4\3\0\3\4\15\0\6\4\1\172\11\4"+
    "\4\0\2\4\3\0\3\4\15\0\6\4\1\173\11\4"+
    "\4\0\2\4\3\0\3\4\15\0\6\4\1\174\11\4"+
    "\4\0\2\4\3\0\1\4\1\175\1\4\15\0\20\4"+
    "\4\0\2\4\3\0\1\4\1\176\1\4\15\0\20\4"+
    "\4\0\2\4\3\0\1\4\1\177\1\4\15\0\20\4"+
    "\4\0\2\4\3\0\1\4\1\200\1\4\15\0\20\4"+
    "\4\0\2\4\3\0\1\4\1\201\1\4\15\0\20\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4223];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\2\11\2\1\10\11\6\1\2\0"+
    "\1\11\2\0\3\1\3\0\1\11\10\1\1\0\3\1"+
    "\1\0\7\1\1\0\3\1\1\0\10\1\1\0\3\1"+
    "\1\0\5\1\1\0\3\1\1\0\4\1\1\0\3\1"+
    "\1\0\4\1\1\11\1\0\3\1\1\0\1\11\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _TscnLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TscnLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 31: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 32: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 33: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 34: break;
          case 5: 
            { return COLON;
            } 
            // fall through
          case 35: break;
          case 6: 
            { return SLASH;
            } 
            // fall through
          case 36: break;
          case 7: 
            { return COMMENT;
            } 
            // fall through
          case 37: break;
          case 8: 
            { return L_PAREN;
            } 
            // fall through
          case 38: break;
          case 9: 
            { return R_PAREN;
            } 
            // fall through
          case 39: break;
          case 10: 
            { return L_BRACKET;
            } 
            // fall through
          case 40: break;
          case 11: 
            { return R_BRACKET;
            } 
            // fall through
          case 41: break;
          case 12: 
            { return L_CURLY;
            } 
            // fall through
          case 42: break;
          case 13: 
            { return R_CURLY;
            } 
            // fall through
          case 43: break;
          case 14: 
            { return EQUAL;
            } 
            // fall through
          case 44: break;
          case 15: 
            { return COMMA;
            } 
            // fall through
          case 45: break;
          case 16: 
            { return DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 46: break;
          case 17: 
            { return SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 47: break;
          case 18: 
            { return TRUE;
            } 
            // fall through
          case 48: break;
          case 19: 
            { return NODE_KEYWORD;
            } 
            // fall through
          case 49: break;
          case 20: 
            { return NULL;
            } 
            // fall through
          case 50: break;
          case 21: 
            { return FALSE;
            } 
            // fall through
          case 51: break;
          case 22: 
            { return SINGLE_QUOTED_RESOURCE_STRING;
            } 
            // fall through
          case 52: break;
          case 23: 
            { return RESOURCE_KEYWORD;
            } 
            // fall through
          case 53: break;
          case 24: 
            { return DOUBLE_QUOTED_RESOURCE_STRING;
            } 
            // fall through
          case 54: break;
          case 25: 
            { return GD_SCENE_KEYWORD;
            } 
            // fall through
          case 55: break;
          case 26: 
            { return EXT_RESOURCE;
            } 
            // fall through
          case 56: break;
          case 27: 
            { return SUB_RESOURCE;
            } 
            // fall through
          case 57: break;
          case 28: 
            { return GD_RESOURCE_KEYWORD;
            } 
            // fall through
          case 58: break;
          case 29: 
            { return EXT_RESOURCE_KEYWORD;
            } 
            // fall through
          case 59: break;
          case 30: 
            { return SUB_RESOURCE_KEYWORD;
            } 
            // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
