/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package gdscript.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static gdscript.psi.ScriptElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_ScriptLexer.flex</tt>
 */
public class _ScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\1\0\1\1\1\24\22\0\1\1\1\61\1\5\1\25\1\4\1\67\1\62\1\23\1\75"+
    "\1\76\1\66\1\15\1\77\1\11\1\13\1\6\1\16\1\20\1\54\1\55\6\10\1\70\1\100\1\56"+
    "\1\57\1\60\1\0\1\53\4\22\1\14\1\22\24\7\1\71\1\2\1\72\1\65\1\12\1\0\1\41\1"+
    "\17\1\43\1\47\1\30\1\27\1\50\1\40\1\26\1\7\1\42\1\35\1\46\1\44\1\32\1\31\1"+
    "\7\1\33\1\36\1\34\1\45\1\52\1\37\1\21\1\51\1\7\1\73\1\63\1\74\1\64\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\1\12\1\13\1\10\1\14\1\1"+
    "\1\10\1\15\1\16\17\10\1\2\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\3\1\5\3\6\1\42\1\1\1\0\1\43\1\44"+
    "\1\10\1\45\1\0\1\46\1\47\1\50\2\10\3\15"+
    "\1\51\1\52\1\53\11\10\1\54\11\10\1\55\12\10"+
    "\7\0\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\5"+
    "\1\6\1\74\1\1\2\10\1\15\1\75\1\76\1\77"+
    "\27\10\1\100\2\10\1\101\5\10\1\102\7\0\1\103"+
    "\1\104\1\0\1\105\1\10\1\0\2\10\1\106\2\10"+
    "\1\107\1\110\1\111\1\112\4\10\1\113\1\114\2\10"+
    "\1\115\1\10\1\116\6\10\1\117\3\10\1\120\10\0"+
    "\1\121\1\0\1\122\1\123\11\10\1\124\1\10\1\125"+
    "\1\10\1\126\1\127\1\130\1\10\1\131\1\132\4\0"+
    "\1\133\1\0\1\74\1\10\1\75\1\134\1\10\1\135"+
    "\1\10\1\136\1\137\1\140\1\141\1\142\1\143\2\10"+
    "\1\144\5\0\1\10\1\145\1\10\1\146\4\10\1\147"+
    "\1\150\1\0\1\151\1\152\3\10\1\153\2\10\2\0"+
    "\1\154\2\0\5\10\14\0\1\155\1\156\1\157\1\160"+
    "\1\161\27\0\1\162\1\0\1\163\1\164\1\165\1\166"+
    "\2\0\1\167\6\0\1\170\2\0\1\171\41\0\1\172"+
    "\1\173\10\0\1\174\3\0\1\175\6\0\1\176\1\0"+
    "\1\177\24\0\1\200\1\0\1\201\2\0\1\202\1\0"+
    "\1\203\1\0\1\204\5\0\1\205\1\206";

  private static int [] zzUnpackAction() {
    int [] result = new int[456];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\101\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e"+
    "\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6"+
    "\0\u09e7\0\101\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\101\0\u0b2c"+
    "\0\u0b6d\0\u0bae\0\u0bef\0\101\0\u0c30\0\u0c71\0\101\0\101"+
    "\0\u028a\0\101\0\u0cb2\0\101\0\u0cf3\0\u0d34\0\u0d75\0\u0db6"+
    "\0\u0df7\0\u0e38\0\u0e79\0\u01c7\0\u01c7\0\u0eba\0\u0efb\0\u0f3c"+
    "\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u01c7"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513"+
    "\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b"+
    "\0\u175c\0\u179d\0\u17de\0\u181f\0\101\0\101\0\101\0\u1860"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\u18a1\0\u0cb2\0\u18e2\0\u1923\0\101"+
    "\0\u1964\0\u01c7\0\u01c7\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9"+
    "\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u01c7\0\u1f7c\0\u1fbd\0\u01c7\0\u1ffe\0\u203f"+
    "\0\u2080\0\u20c1\0\u2102\0\u01c7\0\u2143\0\u2184\0\u21c5\0\u2206"+
    "\0\u2247\0\u2288\0\u22c9\0\101\0\101\0\u230a\0\u01c7\0\u234b"+
    "\0\u238c\0\u23cd\0\u240e\0\u01c7\0\u244f\0\u2490\0\u01c7\0\u01c7"+
    "\0\u01c7\0\u01c7\0\u24d1\0\u2512\0\u2553\0\u2594\0\u01c7\0\u01c7"+
    "\0\u25d5\0\u2616\0\u01c7\0\u2657\0\u01c7\0\u2698\0\u26d9\0\u271a"+
    "\0\u275b\0\u279c\0\u27dd\0\u01c7\0\u281e\0\u285f\0\u28a0\0\u01c7"+
    "\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8"+
    "\0\u2ae9\0\u2b2a\0\u01c7\0\u01c7\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e"+
    "\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u01c7\0\u2db4\0\u01c7"+
    "\0\u2df5\0\u01c7\0\u2e36\0\u01c7\0\u2e77\0\u01c7\0\101\0\u2eb8"+
    "\0\u2ef9\0\u2f3a\0\u2f7b\0\101\0\u2fbc\0\101\0\u2ffd\0\101"+
    "\0\u01c7\0\u303e\0\u307f\0\u30c0\0\u01c7\0\u3101\0\u01c7\0\u01c7"+
    "\0\u01c7\0\u01c7\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287"+
    "\0\u32c8\0\u3309\0\u334a\0\u01c7\0\u338b\0\u01c7\0\u33cc\0\u340d"+
    "\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615"+
    "\0\u3656\0\u3697\0\u01c7\0\u36d8\0\u3719\0\u375a\0\u379b\0\101"+
    "\0\u37dc\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3"+
    "\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab"+
    "\0\u3bec\0\u3c2d\0\u3c6e\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u01c7"+
    "\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76"+
    "\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e"+
    "\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\u4245\0\101"+
    "\0\u4286\0\101\0\101\0\101\0\101\0\u42c7\0\u4308\0\101"+
    "\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510"+
    "\0\u4551\0\101\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696\0\u46d7"+
    "\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e\0\u48df"+
    "\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7"+
    "\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef"+
    "\0\u4d30\0\u4d71\0\u4db2\0\101\0\101\0\u4df3\0\u4e34\0\u4e75"+
    "\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u4fba\0\101\0\u4ffb\0\u503c"+
    "\0\u507d\0\101\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203"+
    "\0\101\0\u5244\0\101\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389"+
    "\0\u53ca\0\u540b\0\u544c\0\u548d\0\u54ce\0\u550f\0\u5550\0\u5591"+
    "\0\u55d2\0\u5613\0\u5654\0\u5695\0\u56d6\0\u5717\0\u5758\0\101"+
    "\0\u5799\0\101\0\u57da\0\u581b\0\101\0\u585c\0\101\0\u589d"+
    "\0\101\0\u58de\0\u591f\0\u5960\0\u59a1\0\u59e2\0\101\0\101";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[456];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\12\2\11\1\22\1\2\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\11\1\33\1\34\1\11"+
    "\1\35\1\11\1\36\1\37\1\11\1\40\2\11\1\41"+
    "\1\42\1\43\2\12\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\102\0\1\3"+
    "\102\0\1\67\102\0\4\70\1\0\3\70\1\0\5\70"+
    "\3\0\25\70\1\0\2\70\23\0\2\71\1\72\1\0"+
    "\1\71\1\73\16\71\1\0\54\71\57\0\1\74\30\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\25\11\1\0\2\11\33\0\1\12\1\0\1\12\1\75"+
    "\1\76\1\0\1\12\1\0\1\12\7\0\1\76\23\0"+
    "\2\12\33\0\1\12\1\0\1\12\1\75\1\76\1\0"+
    "\1\12\1\0\1\12\7\0\1\76\23\0\2\12\1\0"+
    "\1\77\1\100\27\0\1\11\1\101\1\0\1\101\1\75"+
    "\1\16\1\0\1\101\1\11\1\101\2\11\3\0\2\11"+
    "\1\16\22\11\1\0\2\101\33\0\1\75\1\0\1\75"+
    "\1\102\1\76\1\0\1\75\1\0\1\75\7\0\1\76"+
    "\23\0\2\75\32\0\2\11\1\103\1\11\1\0\1\11"+
    "\1\103\5\11\3\0\25\11\1\0\2\11\102\0\1\104"+
    "\31\0\1\12\1\0\1\12\1\75\1\76\1\0\1\12"+
    "\1\105\1\12\1\106\6\0\1\76\23\0\2\12\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\4\11\1\107\1\110\17\11\1\0\2\11\23\0\2\111"+
    "\1\112\1\0\17\111\1\113\1\0\54\111\3\23\1\0"+
    "\75\23\7\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\1\11\1\114\6\11\1\115\5\11\1\116"+
    "\6\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\4\11\1\117\2\11\1\120"+
    "\3\11\1\121\3\11\1\122\5\11\1\0\2\11\32\0"+
    "\2\11\1\103\1\11\1\0\1\11\1\103\3\11\1\123"+
    "\1\11\3\0\7\11\1\124\6\11\1\125\6\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\13\11\1\126\3\11\1\127\5\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\5\11\1\130\10\11\1\131\6\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\2\11\1\132\22\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\4\11\1\133\1\134\17\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\1\135"+
    "\1\11\1\136\3\11\1\137\14\11\1\140\1\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\12\11\1\141\12\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\10\11\1\142\1\143\4\11\1\144\6\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\4\11\1\145\2\11\1\146\15\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\4\11\1\147\12\11\1\150\5\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\13\11\1\151\11\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\1\152"+
    "\24\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\4\11\1\153\6\11\1\154"+
    "\11\11\1\0\2\11\51\0\1\155\1\0\1\156\1\157"+
    "\1\160\1\161\1\162\11\0\1\163\110\0\1\164\1\165"+
    "\100\0\1\166\100\0\1\167\1\170\77\0\1\171\100\0"+
    "\1\172\2\0\1\173\75\0\1\174\3\0\1\175\74\0"+
    "\1\176\100\0\1\177\100\0\1\200\100\0\1\201\26\0"+
    "\1\202\3\70\1\0\3\70\1\0\5\70\3\0\25\70"+
    "\1\0\2\70\23\0\2\71\1\72\1\0\1\71\1\203"+
    "\16\71\1\0\54\71\3\0\1\71\20\0\1\71\61\0"+
    "\1\204\103\0\1\75\1\0\1\75\1\0\1\76\1\0"+
    "\1\75\1\0\1\75\7\0\1\76\23\0\2\75\33\0"+
    "\1\205\1\103\3\0\1\103\1\205\1\0\1\205\33\0"+
    "\2\205\33\0\1\205\5\0\1\205\1\0\1\205\33\0"+
    "\2\205\35\0\1\105\3\0\1\105\1\0\1\105\70\0"+
    "\1\106\1\0\1\106\1\0\1\106\1\0\3\106\1\0"+
    "\1\106\4\0\2\106\10\0\1\106\1\0\1\106\3\0"+
    "\1\106\4\0\2\106\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\4\11\1\206\20\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\2\11\1\207\22\11\1\0\2\11\23\0"+
    "\2\111\1\112\1\0\17\111\1\210\1\0\54\111\3\0"+
    "\1\111\20\0\1\111\77\0\1\211\64\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\5\11\3\0\6\11\1\212"+
    "\16\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\5\11\1\213\17\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\4\11\1\214\20\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\7\11\1\215\15\11\1\0\2\11\32\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\5\11\3\0\16\11\1\216"+
    "\6\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\3\11\1\217\2\11\1\220"+
    "\16\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\1\221\7\11\1\222\14\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\17\11\1\223\5\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\10\11\1\224\14\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\3\11"+
    "\1\225\21\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\5\11\1\226\17\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\6\11\1\227\11\11\1\230\4\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\4\11\1\231\20\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\17\11\1\232\5\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\22\11"+
    "\1\233\2\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\6\11\1\234\1\235"+
    "\15\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\13\11\1\236\11\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\16\11\1\237\6\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\1\240\24\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\10\11\1\241\14\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\13\11\1\242\11\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\21\11\1\243\3\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\16\11"+
    "\1\244\6\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\13\11\1\245\11\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\6\11\1\246\16\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\7\11\1\247\15\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\6\11"+
    "\1\250\1\11\1\251\14\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\2\11"+
    "\1\252\22\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\1\253\24\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\5\11\1\254\17\11\1\0\2\11\66\0"+
    "\1\255\56\0\1\256\124\0\1\257\77\0\1\260\64\0"+
    "\1\261\102\0\1\262\107\0\1\263\116\0\1\264\100\0"+
    "\1\265\21\0\2\204\1\0\2\204\1\266\73\204\7\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\7\11\1\267\15\11\1\0\2\11\32\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\5\11\3\0\13\11\1\270"+
    "\11\11\1\0\2\11\23\0\2\211\1\0\20\211\1\271"+
    "\55\211\7\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\13\11\1\272\11\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\10\11\1\273\14\11\1\0\2\11\32\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\5\11\3\0\15\11\1\274"+
    "\7\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\4\11\1\275\20\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\2\11\1\276\22\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\1\11\1\277\23\11\1\0\2\11\32\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\5\11\3\0\2\11\1\300"+
    "\22\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\20\11\1\301\4\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\10\11\1\302\14\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\3\11\1\303\21\11\1\0\2\11\32\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\5\11\3\0\2\11\1\304"+
    "\22\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\17\11\1\305\5\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\4\11\1\306\20\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\7\11\1\307\15\11\1\0\2\11\32\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\5\11\3\0\2\11\1\310"+
    "\22\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\16\11\1\311\6\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\22\11\1\312\2\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\1\11\1\313\23\11\1\0\2\11\32\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\5\11\3\0\6\11\1\314"+
    "\16\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\15\11\1\315\7\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\7\11\1\316\15\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\2\11\1\317\22\11\1\0\2\11\32\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\5\11\3\0\1\320\24\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\6\11\1\321\1\11\1\322\14\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\10\11\1\323\14\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\7\11\1\324\15\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\15\11"+
    "\1\325\7\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\6\11\1\326\16\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\7\11\1\327\15\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\21\11\1\330\3\11\1\0\2\11\55\0\1\331"+
    "\77\0\1\332\100\0\1\333\102\0\1\334\113\0\1\335"+
    "\64\0\1\336\104\0\1\337\47\0\1\340\102\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\14\11"+
    "\1\341\10\11\1\0\2\11\46\0\1\342\64\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\6\11"+
    "\1\343\16\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\2\11\1\344\22\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\5\11\1\345\17\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\16\11\1\346\6\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\2\11"+
    "\1\347\22\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\13\11\1\350\11\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\5\11\1\351\17\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\6\11\1\352\16\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\13\11"+
    "\1\353\11\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\2\11\1\354\22\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\1\355\24\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\2\11\1\356\22\11\1\0\2\11\32\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\5\11\3\0\5\11\1\357"+
    "\17\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\6\11\1\360\16\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\1\361\24\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\6\11"+
    "\1\362\16\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\10\11\1\363\14\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\12\11\1\364\12\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\2\11\1\365\22\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\21\11"+
    "\1\366\3\11\1\0\2\11\67\0\1\367\66\0\1\370"+
    "\77\0\1\371\77\0\1\372\102\0\1\373\103\0\1\374"+
    "\77\0\1\375\51\0\1\376\102\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\3\11\1\377\21\11"+
    "\1\0\2\11\46\0\1\u0100\64\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\6\11\1\u0101\16\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\21\11\1\u0102\3\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\6\11\1\u0103\16\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\21\11"+
    "\1\u0104\3\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\16\11\1\u0105\6\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\2\11\1\u0106\22\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\7\11\1\u0107\15\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\6\11"+
    "\1\u0108\16\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\15\11\1\u0109\7\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\6\11\1\u010a\16\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\16\11\1\u010b\6\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\u010c\1\0\1\11\1\0\5\11\3\0\25\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\5\11\1\u010d\17\11\1\0\2\11"+
    "\56\0\1\u010e\75\0\1\u010f\111\0\1\u0110\73\0\1\u0111"+
    "\74\0\1\u0112\57\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\4\11\1\u0113\20\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\10\11\1\u0114\14\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\10\11"+
    "\1\u0115\14\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\23\11\1\u0116\1\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\10\11\1\u0117\14\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\17\11\1\u0118\5\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\16\11"+
    "\1\u0119\6\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\10\11\1\u011a\14\11"+
    "\1\0\2\11\57\0\1\u011b\100\0\1\u011c\113\0\1\u011d"+
    "\61\0\1\u011e\103\0\1\u011f\54\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\1\u0120\24\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\23\11\1\u0121\1\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\23\11\1\u0122\1\11\1\0\2\11\32\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\5\11\3\0\2\11\1\u0123"+
    "\22\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\13\11\1\u0124\11\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\23\11\1\u0125\1\11\1\0\2\11\35\0"+
    "\1\u0126\124\0\1\u0127\113\0\1\u0128\65\0\1\u0129\100\0"+
    "\1\u012a\51\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\16\11\1\u012b\6\11\1\0\2\11\32\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\5\11\3\0"+
    "\16\11\1\u012c\6\11\1\0\2\11\32\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\5\11\3\0\16\11\1\u012d"+
    "\6\11\1\0\2\11\32\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\5\11\3\0\20\11\1\u012e\4\11\1\0"+
    "\2\11\32\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\5\11\3\0\16\11\1\u012f\6\11\1\0\2\11\52\0"+
    "\1\u0130\1\u0131\1\u0132\1\0\1\u0133\7\0\1\u0134\1\u0135"+
    "\1\0\1\u0136\1\u0137\1\u0138\101\0\1\u0139\100\0\1\u013a"+
    "\100\0\1\u013b\36\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\6\11\1\u013c\16\11\1\0\2\11"+
    "\32\0\2\11\1\0\1\11\1\0\1\11\1\0\5\11"+
    "\3\0\15\11\1\u013d\7\11\1\0\2\11\32\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\5\11\3\0\15\11"+
    "\1\u013e\7\11\1\0\2\11\32\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\5\11\3\0\2\11\1\u013f\22\11"+
    "\1\0\2\11\32\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\15\11\1\u0140\7\11\1\0\2\11"+
    "\51\0\1\u0141\6\0\1\u0142\64\0\1\u0143\22\0\1\u0144"+
    "\71\0\1\u0145\104\0\1\u0146\71\0\1\u0147\100\0\1\u0148"+
    "\113\0\1\u0149\61\0\1\u014a\107\0\1\u014b\107\0\1\u014c"+
    "\100\0\1\u014d\100\0\1\u014e\71\0\1\u014f\104\0\1\u0150"+
    "\70\0\1\u0151\114\0\1\u0152\74\0\1\u0153\103\0\1\u0154"+
    "\71\0\1\u0155\112\0\1\u0156\66\0\1\u0157\76\0\1\u0158"+
    "\77\0\1\u0159\111\0\1\u015a\100\0\1\u015b\100\0\1\u015c"+
    "\65\0\1\u015d\120\0\1\u015e\42\0\1\u015f\134\0\1\u0160"+
    "\75\0\1\u0161\105\0\1\u0162\62\0\1\u0163\76\0\1\u0164"+
    "\104\0\1\u0165\63\0\1\u0166\117\0\1\u0167\72\0\1\u0168"+
    "\100\0\1\u0169\100\0\1\u016a\103\0\1\u016b\57\0\1\u016c"+
    "\114\0\1\u016d\113\0\1\u016e\51\0\1\u016f\127\0\1\u0170"+
    "\77\0\1\u0171\52\0\1\u0172\117\0\1\u0173\104\0\1\u0174"+
    "\100\0\1\u0175\117\0\1\u0176\1\u0177\61\0\1\u0178\74\0"+
    "\1\u0179\112\0\1\u017a\75\0\1\u017b\65\0\1\u017c\64\0"+
    "\1\u017d\135\0\1\u017e\100\0\1\u017f\57\0\1\u0180\107\0"+
    "\1\u0181\75\0\1\u0182\102\0\1\u0183\110\0\1\u0184\63\0"+
    "\1\u0185\17\0\1\u0186\43\0\1\u0187\100\0\1\u0188\132\0"+
    "\1\u0189\103\0\1\u018a\43\0\1\u018b\126\0\1\u018c\70\0"+
    "\1\u018d\76\0\1\u018e\100\0\1\u018f\103\0\1\u0190\1\0"+
    "\1\u0191\10\0\1\u0192\65\0\1\u0193\1\0\1\u0194\10\0"+
    "\1\u0195\104\0\1\u0196\60\0\1\u0197\111\0\1\u0198\74\0"+
    "\1\u0199\76\0\1\u019a\105\0\1\u019b\70\0\1\u019c\111\0"+
    "\1\u019d\77\0\1\u019e\70\0\1\u019f\111\0\1\u01a0\72\0"+
    "\1\u01a1\102\0\1\u01a2\73\0\1\u01a3\121\0\1\u01a4\73\0"+
    "\1\u01a5\106\0\1\u01a6\77\0\1\u01a7\73\0\1\u01a8\106\0"+
    "\1\u01a9\57\0\1\u01aa\105\0\1\u01ab\111\0\1\u01ac\57\0"+
    "\1\u01ad\110\0\1\u01ae\111\0\1\u01af\57\0\1\u01b0\112\0"+
    "\1\u01b1\66\0\1\u01b2\102\0\1\u01b3\120\0\1\u01b4\56\0"+
    "\1\u01b5\102\0\1\u01b6\120\0\1\u01b7\71\0\1\u01b8\102\0"+
    "\1\u01b9\70\0\1\u01ba\106\0\1\u01bb\102\0\1\u01bc\70\0"+
    "\1\u01bd\106\0\1\u01be\75\0\1\u01bf\76\0\1\u01c0\102\0"+
    "\1\u01c1\76\0\1\u01c2\72\0\1\u01c3\100\0\1\u01c4\104\0"+
    "\1\u01c5\100\0\1\u01c6\112\0\1\u01c7\100\0\1\u01c8\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23075];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\44\1\1\11\4\1\11\11"+
    "\4\1\1\11\1\1\1\0\2\11\1\1\1\11\1\0"+
    "\1\11\50\1\7\0\1\1\3\11\1\1\13\11\4\1"+
    "\1\11\44\1\7\0\2\11\1\0\2\1\1\0\37\1"+
    "\10\0\1\1\1\0\24\1\1\11\4\0\1\11\1\0"+
    "\1\11\1\1\1\11\15\1\5\0\12\1\1\0\10\1"+
    "\2\0\1\11\2\0\5\1\14\0\5\1\27\0\1\11"+
    "\1\0\4\11\2\0\1\11\6\0\1\1\2\0\1\11"+
    "\41\0\2\11\10\0\1\11\3\0\1\11\6\0\1\11"+
    "\1\0\1\11\24\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\5\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[456];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return REAL_NUMBER;
            } 
            // fall through
          case 135: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 136: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 137: break;
          case 4: 
            { return LINE_BREAK;
            } 
            // fall through
          case 138: break;
          case 5: 
            { return NODE_PATH;
            } 
            // fall through
          case 139: break;
          case 6: 
            { return DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 140: break;
          case 7: 
            { return SLASH;
            } 
            // fall through
          case 141: break;
          case 8: 
            { return IDENTIFIER;
            } 
            // fall through
          case 142: break;
          case 9: 
            { return MINUS;
            } 
            // fall through
          case 143: break;
          case 10: 
            { return UNDERSCORE;
            } 
            // fall through
          case 144: break;
          case 11: 
            { return DOT;
            } 
            // fall through
          case 145: break;
          case 12: 
            { return PLUS;
            } 
            // fall through
          case 146: break;
          case 13: 
            { return SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 147: break;
          case 14: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 148: break;
          case 15: 
            { return LESS;
            } 
            // fall through
          case 149: break;
          case 16: 
            { return EQUAL;
            } 
            // fall through
          case 150: break;
          case 17: 
            { return GREATER;
            } 
            // fall through
          case 151: break;
          case 18: 
            { return BANG;
            } 
            // fall through
          case 152: break;
          case 19: 
            { return AMPERSAND;
            } 
            // fall through
          case 153: break;
          case 20: 
            { return PIPE;
            } 
            // fall through
          case 154: break;
          case 21: 
            { return TILDE;
            } 
            // fall through
          case 155: break;
          case 22: 
            { return CARET;
            } 
            // fall through
          case 156: break;
          case 23: 
            { return STAR;
            } 
            // fall through
          case 157: break;
          case 24: 
            { return PERCENT;
            } 
            // fall through
          case 158: break;
          case 25: 
            { return COLON;
            } 
            // fall through
          case 159: break;
          case 26: 
            { return L_BRACKET;
            } 
            // fall through
          case 160: break;
          case 27: 
            { return R_BRACKET;
            } 
            // fall through
          case 161: break;
          case 28: 
            { return L_BRACE;
            } 
            // fall through
          case 162: break;
          case 29: 
            { return R_BRACE;
            } 
            // fall through
          case 163: break;
          case 30: 
            { return L_PAREN;
            } 
            // fall through
          case 164: break;
          case 31: 
            { return R_PAREN;
            } 
            // fall through
          case 165: break;
          case 32: 
            { return COMMA;
            } 
            // fall through
          case 166: break;
          case 33: 
            { return SEMICOLON;
            } 
            // fall through
          case 167: break;
          case 34: 
            { return SLASH_EQUAL;
            } 
            // fall through
          case 168: break;
          case 35: 
            { return MINUS_EQUAL;
            } 
            // fall through
          case 169: break;
          case 36: 
            { return ARROW;
            } 
            // fall through
          case 170: break;
          case 37: 
            { return DOT_DOT;
            } 
            // fall through
          case 171: break;
          case 38: 
            { return PLUS_EQUAL;
            } 
            // fall through
          case 172: break;
          case 39: 
            { return BINARY_NUMBER;
            } 
            // fall through
          case 173: break;
          case 40: 
            { return HEXADECIMAL_NUMBER;
            } 
            // fall through
          case 174: break;
          case 41: 
            { return IF;
            } 
            // fall through
          case 175: break;
          case 42: 
            { return IS;
            } 
            // fall through
          case 176: break;
          case 43: 
            { return IN;
            } 
            // fall through
          case 177: break;
          case 44: 
            { return OR;
            } 
            // fall through
          case 178: break;
          case 45: 
            { return AS;
            } 
            // fall through
          case 179: break;
          case 46: 
            { return LESS_LESS;
            } 
            // fall through
          case 180: break;
          case 47: 
            { return LESS_EQUAL;
            } 
            // fall through
          case 181: break;
          case 48: 
            { return EQUAL_EQUAL;
            } 
            // fall through
          case 182: break;
          case 49: 
            { return GREATER_EQUAL;
            } 
            // fall through
          case 183: break;
          case 50: 
            { return GREATER_GREATER;
            } 
            // fall through
          case 184: break;
          case 51: 
            { return BANG_EQUAL;
            } 
            // fall through
          case 185: break;
          case 52: 
            { return AMPERSAND_EQUAL;
            } 
            // fall through
          case 186: break;
          case 53: 
            { return AMPERSAND_AMPERSAND;
            } 
            // fall through
          case 187: break;
          case 54: 
            { return PIPE_EQUAL;
            } 
            // fall through
          case 188: break;
          case 55: 
            { return PIPE_PIPE;
            } 
            // fall through
          case 189: break;
          case 56: 
            { return CARET_EQUAL;
            } 
            // fall through
          case 190: break;
          case 57: 
            { return STAR_EQUAL;
            } 
            // fall through
          case 191: break;
          case 58: 
            { return PERCENT_EQUAL;
            } 
            // fall through
          case 192: break;
          case 59: 
            { return INFER;
            } 
            // fall through
          case 193: break;
          case 60: 
            { return MULTILINE_DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 194: break;
          case 61: 
            { return MULTILINE_SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 195: break;
          case 62: 
            { return INT;
            } 
            // fall through
          case 196: break;
          case 63: 
            { return FOR;
            } 
            // fall through
          case 197: break;
          case 64: 
            { return AND;
            } 
            // fall through
          case 198: break;
          case 65: 
            { return NOT;
            } 
            // fall through
          case 199: break;
          case 66: 
            { return VAR;
            } 
            // fall through
          case 200: break;
          case 67: 
            { return LESS_LESS_EQUAL;
            } 
            // fall through
          case 201: break;
          case 68: 
            { return GREATER_GREATER_EQUAL;
            } 
            // fall through
          case 202: break;
          case 69: 
            { return BOOL;
            } 
            // fall through
          case 203: break;
          case 70: 
            { return FUNC;
            } 
            // fall through
          case 204: break;
          case 71: 
            { return ELIF;
            } 
            // fall through
          case 205: break;
          case 72: 
            { return ELSE;
            } 
            // fall through
          case 206: break;
          case 73: 
            { return ENUM;
            } 
            // fall through
          case 207: break;
          case 74: 
            { return PASS;
            } 
            // fall through
          case 208: break;
          case 75: 
            { return TOOL;
            } 
            // fall through
          case 209: break;
          case 76: 
            { return TRUE;
            } 
            // fall through
          case 210: break;
          case 77: 
            { return SELF;
            } 
            // fall through
          case 211: break;
          case 78: 
            { return SYNC;
            } 
            // fall through
          case 212: break;
          case 79: 
            { return NULL;
            } 
            // fall through
          case 213: break;
          case 80: 
            { return VOID;
            } 
            // fall through
          case 214: break;
          case 81: 
            { return BREAK;
            } 
            // fall through
          case 215: break;
          case 82: 
            { return FLOAT;
            } 
            // fall through
          case 216: break;
          case 83: 
            { return FALSE;
            } 
            // fall through
          case 217: break;
          case 84: 
            { return WHILE;
            } 
            // fall through
          case 218: break;
          case 85: 
            { return AWAIT;
            } 
            // fall through
          case 219: break;
          case 86: 
            { return CONST;
            } 
            // fall through
          case 220: break;
          case 87: 
            { return CLASS;
            } 
            // fall through
          case 221: break;
          case 88: 
            { return MATCH;
            } 
            // fall through
          case 222: break;
          case 89: 
            { return YIELD;
            } 
            // fall through
          case 223: break;
          case 90: 
            { return AT_ICON;
            } 
            // fall through
          case 224: break;
          case 91: 
            { return AT_TOOL;
            } 
            // fall through
          case 225: break;
          case 92: 
            { return EXPORT;
            } 
            // fall through
          case 226: break;
          case 93: 
            { return PUPPET;
            } 
            // fall through
          case 227: break;
          case 94: 
            { return RETURN;
            } 
            // fall through
          case 228: break;
          case 95: 
            { return REMOTE;
            } 
            // fall through
          case 229: break;
          case 96: 
            { return SIGNAL;
            } 
            // fall through
          case 230: break;
          case 97: 
            { return SETGET;
            } 
            // fall through
          case 231: break;
          case 98: 
            { return STATIC;
            } 
            // fall through
          case 232: break;
          case 99: 
            { return ASSERT;
            } 
            // fall through
          case 233: break;
          case 100: 
            { return MASTER;
            } 
            // fall through
          case 234: break;
          case 101: 
            { return EXTENDS;
            } 
            // fall through
          case 235: break;
          case 102: 
            { return ONREADY;
            } 
            // fall through
          case 236: break;
          case 103: 
            { return AT_EXPORT;
            } 
            // fall through
          case 237: break;
          case 104: 
            { return AT_PUPPET;
            } 
            // fall through
          case 238: break;
          case 105: 
            { return AT_REMOTE;
            } 
            // fall through
          case 239: break;
          case 106: 
            { return AT_MASTER;
            } 
            // fall through
          case 240: break;
          case 107: 
            { return CONTINUE;
            } 
            // fall through
          case 241: break;
          case 108: 
            { return AT_ONREADY;
            } 
            // fall through
          case 242: break;
          case 109: 
            { return BREAKPOINT;
            } 
            // fall through
          case 243: break;
          case 110: 
            { return PUPPETSYNC;
            } 
            // fall through
          case 244: break;
          case 111: 
            { return REMOTESYNC;
            } 
            // fall through
          case 245: break;
          case 112: 
            { return CLASS_NAME;
            } 
            // fall through
          case 246: break;
          case 113: 
            { return MASTERSYNC;
            } 
            // fall through
          case 247: break;
          case 114: 
            { return AT_EXPORT_DIR;
            } 
            // fall through
          case 248: break;
          case 115: 
            { return AT_PUPPETSYNC;
            } 
            // fall through
          case 249: break;
          case 116: 
            { return AT_REMOTESYNC;
            } 
            // fall through
          case 250: break;
          case 117: 
            { return AT_MASTERSYNC;
            } 
            // fall through
          case 251: break;
          case 118: 
            { return AT_EXPORT_FILE;
            } 
            // fall through
          case 252: break;
          case 119: 
            { return AT_EXPORT_ENUM;
            } 
            // fall through
          case 253: break;
          case 120: 
            { return AT_EXPORT_FLAGS;
            } 
            // fall through
          case 254: break;
          case 121: 
            { return AT_EXPORT_RANGE;
            } 
            // fall through
          case 255: break;
          case 122: 
            { return AT_EXPORT_NODE_PATH;
            } 
            // fall through
          case 256: break;
          case 123: 
            { return AT_EXPORT_MULTILINE;
            } 
            // fall through
          case 257: break;
          case 124: 
            { return AT_EXPORT_EXP_EASING;
            } 
            // fall through
          case 258: break;
          case 125: 
            { return AT_EXPORT_GLOBAL_DIR;
            } 
            // fall through
          case 259: break;
          case 126: 
            { return AT_EXPORT_PLACEHOLDER;
            } 
            // fall through
          case 260: break;
          case 127: 
            { return AT_EXPORT_GLOBAL_FILE;
            } 
            // fall through
          case 261: break;
          case 128: 
            { return AT_EXPORT_COLOR_NO_ALPHA;
            } 
            // fall through
          case 262: break;
          case 129: 
            { return AT_EXPORT_FLAGS_2D_RENDER;
            } 
            // fall through
          case 263: break;
          case 130: 
            { return AT_EXPORT_FLAGS_3D_RENDER;
            } 
            // fall through
          case 264: break;
          case 131: 
            { return AT_EXPORT_FLAGS_2D_PHYSICS;
            } 
            // fall through
          case 265: break;
          case 132: 
            { return AT_EXPORT_FLAGS_3D_PHYSICS;
            } 
            // fall through
          case 266: break;
          case 133: 
            { return AT_EXPORT_FLAGS_2D_NAVIGATION;
            } 
            // fall through
          case 267: break;
          case 134: 
            { return AT_EXPORT_FLAGS_3D_NAVIGATION;
            } 
            // fall through
          case 268: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
